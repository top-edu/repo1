generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model categories {
  id        Int         @id @default(autoincrement())
  category  String      @db.VarChar(100)
  type      String?     @default("TS") @db.VarChar(45)
  questions questions[]
}

model commoncontents {
  id               Int         @id @default(autoincrement())
  content          String      @db.MediumText
  lastModifiedTime DateTime    @default(now()) @db.Timestamp(0)
  questions        questions[]
}

model credithistory {
  id                                                  Int      @id @default(autoincrement())
  userId                                              Int
  deductedCredits                                     Int?
  addedCredits                                        Int?
  addedCreditsFromUserId                              Int?
  addedCreditsToUserId                                Int?
  description                                         String?  @db.VarChar(100)
  lastModifiedTime                                    DateTime @default(now()) @db.Timestamp(0)
  people_credithistory_addedCreditsFromUserIdTopeople people?  @relation("credithistory_addedCreditsFromUserIdTopeople", fields: [addedCreditsFromUserId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fromuser_id")
  people_credithistory_userIdTopeople                 people   @relation("credithistory_userIdTopeople", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "person_id")
  people_credithistory_addedCreditsToUserIdTopeople   people?  @relation("credithistory_addedCreditsToUserIdTopeople", fields: [addedCreditsToUserId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "touser_id")

  @@index([addedCreditsFromUserId], map: "fromuser_id_idx")
  @@index([userId], map: "person_id_idx")
  @@index([addedCreditsToUserId], map: "touser_id_idx")
}

model messages {
  id                             Int        @id @default(autoincrement())
  text                           String     @db.VarChar(500)
  fromId                         Int?
  toId                           Int
  questionId                     Int?
  isRead                         Int        @default(0) @db.TinyInt
  lastModifiedTime               DateTime   @default(now()) @db.Timestamp(0)
  people_messages_fromIdTopeople people?    @relation("messages_fromIdTopeople", fields: [fromId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fromId_person")
  questions                      questions? @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "questionId_question")
  people_messages_toIdTopeople   people     @relation("messages_toIdTopeople", fields: [toId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "toId_person")

  @@index([fromId], map: "fromId_person_idx")
  @@index([questionId], map: "questionId_question_idx")
  @@index([toId], map: "toId_person_idx")
}

model people {
  id                                                         Int                @id @default(autoincrement())
  type                                                       String             @default("User") @db.VarChar(100)
  givenname                                                  String?            @db.VarChar(100)
  surname                                                    String?            @db.VarChar(100)
  mobile                                                     String?            @db.VarChar(100)
  email                                                      String?            @unique(map: "unique_index") @db.VarChar(100)
  address                                                    String?            @db.VarChar(100)
  status                                                     String?            @db.VarChar(100)
  password                                                   String?            @db.VarChar(100)
  token                                                      String?            @db.VarChar(100)
  permission                                                 String?            @db.VarChar(1000)
  note                                                       String?            @db.VarChar(1000)
  orders                                                     String?            @db.VarChar(1000)
  refNo                                                      String?            @db.VarChar(100)
  credits                                                    Int?               @default(0)
  lastModifiedTime                                           DateTime           @default(now()) @db.Timestamp(0)
  credithistory_credithistory_addedCreditsFromUserIdTopeople credithistory[]    @relation("credithistory_addedCreditsFromUserIdTopeople")
  credithistory_credithistory_userIdTopeople                 credithistory[]    @relation("credithistory_userIdTopeople")
  credithistory_credithistory_addedCreditsToUserIdTopeople   credithistory[]    @relation("credithistory_addedCreditsToUserIdTopeople")
  messages_messages_fromIdTopeople                           messages[]         @relation("messages_fromIdTopeople")
  messages_messages_toIdTopeople                             messages[]         @relation("messages_toIdTopeople")
  userquestions                                              userquestions[]
  userquestionsets                                           userquestionsets[]
}

model questions {
  id                    Int             @id @default(autoincrement())
  type                  String?         @db.VarChar(45)
  categoryId            Int?
  setNo                 Int?            @db.SmallInt
  commonContentId       Int?
  content               String          @db.MediumText
  answerA               String          @db.MediumText
  answerB               String          @db.MediumText
  answerC               String?         @db.MediumText
  answerD               String?         @db.MediumText
  answerE               String?         @db.MediumText
  note                  String?         @db.MediumText
  correctAnswer         String          @db.VarChar(10)
  wrongQuestionOfChenyi Int?            @db.TinyInt
  newQuestionOfChenyi   Int?            @db.TinyInt
  source                String?         @db.VarChar(100)
  correctAnswerCount    Int?            @default(0)
  totalAnswerCount      Int?            @default(0)
  lastModifiedTime      DateTime        @default(now()) @db.Timestamp(0)
  level                 String?         @db.VarChar(45)
  messages              messages[]
  categories            categories?     @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "category_id")
  commoncontents        commoncontents? @relation(fields: [commonContentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "commoncontent_id")
  userquestions         userquestions[]

  @@index([categoryId], map: "category_id_idx")
  @@index([commonContentId], map: "commoncontent_id_idx")
}

model userquestions {
  userId           Int
  questionId       Int
  userAnswer       String?   @db.VarChar(500)
  lastModifiedTime DateTime  @default(now()) @db.Timestamp(0)
  questions        questions @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "questionid")
  people           people    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "userid")

  @@unique([userId, questionId], map: "unique_index")
  @@index([questionId], map: "questionid_idx")
}

model userquestionsets {
  userId           Int
  setNo            Int
  type             String   @db.VarChar(45)
  finished         Int?     @db.TinyInt
  lastModifiedTime DateTime @default(now()) @db.Timestamp(0)
  random           Float?   @db.Float
  people           people   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "userquestionsets_userId")

  @@unique([userId, setNo, type], map: "unique_user_set_type")
}
